openapi: 3.0.0
servers:
  - url: https://kokoichi0206.mydns.jp/api/v1/
    description: Raspberry Pi Server

info:
  description: This is a personal api related to sakamichi-group.
  version: "1.10.0"
  title: Sakamichi API
  license:
    name: MIT
    url: 'https://opensource.org/license/mit/'

paths:
  /members:
    get:
      summary: get members
      operationId: getMembers
      description: |
        ## By passing the appropriate query parameter, you can get information about members.
      parameters:
        - in: query
          name: key
          description: API key
          required: true
          schema:
            type: string
        - in: query
          name: gn
          description: Target group name
          required: false
          schema:
            $ref: '#/components/schemas/GroupQueryEnum'
        - in: query
          name: sort
          description: Sort key. 
          required: false
          schema:
            $ref: '#/components/schemas/SortQueryEnum'
        - in: query
          name: desc
          description: Whether the order is descending or ascending
          required: false
          schema:
            type: boolean
        - in: query
          name: include_graduated
          description: Whether the graduated members are included or not
          required: false
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: matched results
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  members:
                    type: array
                    items:
                      $ref: '#/components/schemas/Member'
        '400':
          description: bad input parameter
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  error:
                    type: "string"
                    example: "group name does not exist"
        '404':
          description: wrong or no api key
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  error:
                    type: "string"
                    example: "No api key"
        '500':
          description: internal server error
      tags:
        - developers
  /members/download:
    get:
      summary: download members
      operationId: downloadMembers
      description: |
        ## By passing the appropriate query parameter, you can download information about members as a zip format.
      parameters:
        - in: query
          name: key
          description: API key
          required: true
          schema:
            type: string
      responses:
        '200':
          description: zip data
          content:
            application/zip:
              schema:
                type: string
                format: binary
        '500':
          description: internal server error
      tags:
        - developers
  /blogs:
    get:
      summary: searches blogs
      operationId: searchBlogs
      description: |
        ## By passing the appropriate query parameter, you can get information about blogs.
      parameters:
        - in: query
          name: key
          description: API key
          required: true
          schema:
            type: string
        - in: query
          name: gn
          description: Group Name for searching blogs
          required: false
          schema:
            type: string
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  blogs:
                    type: array
                    items:
                      $ref: '#/components/schemas/Blog'
        '400':
          description: bad input parameter
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  error:
                    type: "string"
                    example: "group name does not exist"
        '403':
          description: wrong or no api key
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  error:
                    type: "string"
                    example: "No valid api key"
        '500':
          description: internal server error
      tags:
        - developers
  /positions:
    get:
      summary: searches positions
      operationId: searchPositions
      description: |
        ## By passing the appropriate query parameter, you can get information about positions.
      parameters:
        - in: query
          name: title
          description: Song title
          required: true
          schema:
            type: string
        - in: query
          name: key
          description: API key
          required: true
          schema:
            type: string
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                properties:
                  positions:
                    type: array
                    items:
                      $ref: '#/components/schemas/Position'
                type: object
        '400':
          description: bad input parameter
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  error:
                    type: "string"
                    example: "Invalid title"
        '403':
          description: wrong or no api key
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  error:
                    type: "string"
                    example: "No valid api key"
        '500':
          description: internal server error
      tags:
        - developers
  /songs:
    get:
      summary: searches inventory
      operationId: getAllSongs
      description: |
        Brief information of All songs
      parameters:
        - in: query
          name: gn
          description: pass the group name
          required: true
          schema:
            type: string
        - in: query
          name: key
          description: API key
          required: true
          schema:
            type: string
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                properties:
                  songs:
                    type: array
                    items:
                      $ref: '#/components/schemas/Song'
                type: object
        '400':
          description: bad input parameter
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  error:
                    type: "string"
                    example: "Invalid group name"
        '403':
          description: wrong or no api key
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  error:
                    type: "string"
                    example: "No valid api key"
        '500':
          description: internal server error
      tags:
        - developers

components:
  schemas:
    GroupQueryEnum:
      type: string
      enum:
        - "nogizaka"
        - "sakurazaka"
        - "hinatazaka"
    SortQueryEnum:
      type: string
      enum:
        - "id"
        - "birthday"
        - "height"

    Member:
      type: object
      required:
        - id
        - name
        - manufacturer
        - releaseDate
      properties:
        id:
          type: integer
          format: id
          example: 4
        name:
          type: string
          example: 名無し太郎
        birthday:
          type: string
          example: 2004年2月2日
        generation:
          type: string
          example: 3期生
        height:
          type: string
          example: 159cm
        blood_type:
          type: string
          example: B型
        blog_url:
          type: string
          example: https://blog.nogizaka46.com/nanashi.taro
        img_url:
          type: string
          example: https://kokoichi0206.mydns.jp/imgs/pien/nanashi.taro.jpeg
    Blog:
      properties:
        name:
          type: string
          example: 名無し二郎
        blog_url:
          type: string
          example: https://blog.nogizaka46.com/nanashi.jiro
        last_blog_img:
          type: string
          example: https://kokoichi0206.mydns.jp/imgs/pien/nanashi.jiro.jpeg
        last_updated_at:
          type: string
          example: 2021/10/08 17:24
      type: object
    Position:
      properties:
        member_name:
          type: string
          example: 名無し三郎
        position:
          type: string
          example: '003'
        img_url:
          type: string
          example: https://kokoichi0206.mydns.jp/imgs/pien/nanashi.saburo.jpeg
        is_center:
          type: boolean
          example: true
      type: object
    Song:
      properties:
        single:
          type: string
          example: '6th'
        title:
          type: string
          example: 'ってか'
        center:
          type: string
          example: '名無し五郎'
      type: object
